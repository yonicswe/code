#!/bin/bash

for i in /proc/voltaire/itarget/devices/[0-9]* ; do

	cat ${i} | grep -qi "uninitialized"
	ret=$?
	if [ ${ret} -eq 0 ] ; then 
#		echo ${i} is uninitialized
		continue;
	fi

	eval $(cat ${i} | \
		tr '\n' ' '                         | \
		sed -e 's/=/=\"/g'                  | \
		sed -e 's/,/\" /g'                  | \
		sed -e 's/$/\"/'                    | \
		sed -e 's/ \[/=\"/g'                | \
		sed -e 's/\]: /\" /g')

#	echo '$LUN'     is $LUN
#	echo '$Host'    is $Host
#	echo '$Channel' is $Channel
#	echo '$ID'      is $ID
#	echo '$MAP'     is $MAP

	SPACEED_MAP=$(echo $MAP|sed -e 's/./& /g') 

	MAP_ARRAY=( $(echo $SPACED_MAP) )

#	cat ${i}
#	echo with map ${MAP}

	change_map=0
	for (( count=0; count<${#MAP_ARRAY[*]}; count++)) ; do
		opt=${MAP_ARRAY[$count]}
		
		srch_path="/dev/scsi/host${count}/bus${Channel}/target${ID}/lun${LUN}/disc"

		case ${opt} in
			-)
#				echo "no need to look for ${srch_str}"
				;;
			S)
#				echo "look for ${srch_str}"
				dd count=1 of=/dev/null if=${srch_str}
				ret=$?
				if [ ${ret} -ne 0 ] ; then 
					# failed to read from device, need to update the new map to newdev
					MAP_ARRAY[count]="-"
					change_map=1
				fi
				;;
			U)	
#				echo "look for ${srch_str}"
				dd count=1 of=/dev/null if=${srch_str}
				ret=$?
				if [ ${ret} -ne 0 ] ; then 
					# failed to read from device, need to update the new map to newdev
					MAP_ARRAY[count]="-"
					change_map=1
				fi
				;;
			P)
#				echo "look for ${srch_str}"
				dd count=1 of=/dev/null if=${srch_str}
				ret=$?
				if [ ${ret} -ne 0 ] ; then 
					# failed to read from device, need to update the new map to newdev
					MAP_ARRAY[count]="-"
					change_map=1
				fi
				;;
		esac
	done

	if [ ${change_map} -eq 1 ] ; then 
		MAP=$(echo ${MAP_ARRAY[*]} | sed 's/ //g' )
		echo "ID=${ID},Channel=${Channel},LUN=${LUN},WWPN=${WWPN},MAP=${MAP}" > /proc/voltaire/itarget/devices/newdev 	
	fi
done
